{"version":3,"sources":["store/reducers/app.js","store/actions/actionTypes.js","store/actions/app.js","components/SubmitForm/SubmitForm.js","components/List/List.js","components/DoneList/DoneList.js","App.js","index.js","assets/utils/serverEndpoint.js"],"names":["initialState","text","list","done","reducer","state","arguments","length","undefined","action","type","apiList","payload","todo","apiDone","Object","objectSpread","concat","toConsumableArray","updateInitialState","inputChange","newItem","addToList","newList","filter","item","_id","itemToDel","deleteFromList","name","doneItem","newDoneList","addtoDone","deleteFromDone","dispatch","fetch","serverEndpoint","baseUrl","then","res","json","SubmitForm","props","react_default","a","createElement","className","autoFocus","onChange","onInputChange","value","inputText","onKeyPress","handleInputEnter","onClick","handlerBtnSubmit","List","listMapped","listArr","map","key","Math","random","e","preventDefault","href","onDeleteFromList","onAddToDone","DoneList","doneListMapped","doneArr","listItem","onDeleteFromDone","App","_this","onAddToList","this","components_SubmitForm_SubmitForm","List_List","DoneList_DoneList","React","Component","connect","app","actions","target","newTodo","method","headers","Content-Type","body","JSON","stringify","catch","err","console","log","toString","newDone","errMessage","rootReducer","combineReducers","appReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.aab136b5.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  text: '',\n  list: [],\n  done: [],\n};\n\nconst updateInitialState = (state, action) => {\n  if (action.type === actionTypes.UPDATE_INITIAL_STATE) {\n    let apiList = action.payload.todo;\n    let apiDone = action.payload.done;\n    return {\n      ...state,\n      list: [...state.list, ...apiList],\n      done: [...state.done, ...apiDone],\n    };\n  }\n};\n\nconst inputChange = (state, action) => {\n  if (action.type === actionTypes.INPUT_CHANGE) {\n    return {\n      ...state,\n      text: action.text,\n    };\n  }\n};\n\nconst addToList = (state, action) => {\n  return {\n    ...state,\n    list: [...state.list, action.newItem],\n  };\n};\n\nconst deleteFromList = (state, action) => {\n  const newList = state.list.filter(item => item._id !== action.itemToDel._id);\n  return {\n    ...state,\n    list: newList,\n  };\n};\n\nconst addtoDone = (state, action) => {\n  // Check items that are not null and that does not exist on list yet.\n  const newList = state.list.filter(item => {\n    return item.name !== action.doneItem.item.name;\n    // && action.doneItem.name !== null;\n  });\n  const newDoneList = [...state.done, action.doneItem.item];\n\n  return {\n    ...state,\n    list: newList,\n    done: newDoneList,\n  };\n};\n\nconst deleteFromDone = (state, action) => {\n  const newDoneList = state.done.filter(\n    item => item._id !== action.itemToDel._id,\n  );\n  return {\n    ...state,\n    done: newDoneList,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.UPDATE_INITIAL_STATE:\n      return updateInitialState(state, action);\n    case actionTypes.INPUT_CHANGE:\n      return inputChange(state, action);\n    case actionTypes.ADD_TO_LIST:\n      return addToList(state, action);\n    case actionTypes.DELETE_FROM_LIST:\n      return deleteFromList(state, action);\n    case actionTypes.ADD_TO_DONE:\n      return addtoDone(state, action);\n    case actionTypes.DELETE_FROM_DONE:\n      return deleteFromDone(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const INPUT_CHANGE = 'INPUT_CHANGE';\nexport const ADD_TO_LIST = 'ADD_TO_LIST';\nexport const DELETE_FROM_LIST = 'DELETE_FROM_LIST';\nexport const ADD_TO_DONE = 'ADD_TO_DONE';\nexport const DELETE_FROM_DONE = 'DELETE_FROM_DONE';\n\nexport const UPDATE_INITIAL_STATE = 'UPDATE_INITIAL_STATE';\n","import * as actionTypes from './actionTypes';\n\nimport serverEndpoint from '../../assets/utils/serverEndpoint';\n\n// const uuid = require('uuid');\n\n// Setting initial state with data from server.\n// Called when app mounts.\nexport const updateInitialState = () => {\n  return dispatch => {\n    fetch(serverEndpoint.baseUrl)\n      .then(res => res.json())\n      .then(res => {\n        dispatch({\n          type: actionTypes.UPDATE_INITIAL_STATE,\n          payload: {\n            todo: res.list,\n            done: res.done,\n          },\n        });\n      });\n  };\n};\n\n// Text for new todo.\nexport const inputChange = text => {\n  return {\n    type: actionTypes.INPUT_CHANGE,\n    text: text.target.value,\n  };\n};\n\n// Add new item to todo/list array.\nexport const addToList = newItem => {\n  // Gets item name, makes obj with received item name.\n  const newTodo = { name: newItem };\n\n  // Send POST req to server with new new item obj.\n  return dispatch => {\n    fetch(`${serverEndpoint.baseUrl}/addtodo`, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ newTodo }),\n    })\n      .then(res => res.json())\n      .then(res => {\n        // Calls state update, so state receives newest added item _id.\n        updateInitialState();\n        return res;\n      })\n      .then(res => {\n        // Dispatches new item obj to reducer if item doesn't exist.\n        // if there is a name from server it means item does not exist in db so we add it to ui as well.\n        if (res.name) {\n          dispatch({\n            type: actionTypes.ADD_TO_LIST,\n            newItem: res,\n          });\n        }\n      })\n      .catch(err => console.log(err));\n  };\n};\n\n// Add item from todo/list to done list.\nexport const addToDone = doneItem => {\n  //  Gets new(clicked todo item) name and creates obj with its name as name property.\n  const newDone = { name: doneItem };\n  // Send POST req to server with new done item obj.\n  return dispatch => {\n    fetch(`${serverEndpoint.baseUrl}/adddone`, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ newDone }),\n    })\n      .then(res => res.json())\n      .then(res => {\n        updateInitialState();\n        return res;\n      })\n      .then(res => {\n        // if there is name that comes from server dispatches it to reducer to add it to done list and remove from list.(todo)\n        if (res.item.name) {\n\n          dispatch({\n            type: actionTypes.ADD_TO_DONE,\n            doneItem: res,\n            errMessage: res.errMessage,\n          });\n          // otherwise sends null to reducer so it can remove it from list(todo) and just not add anything to done.\n        } else {\n          dispatch({\n            type: actionTypes.ADD_TO_DONE,\n            doneItem: { name: doneItem },\n            errMessage: res.errMessage,\n          });\n        }\n      })\n      .catch(err => console.log(err));\n  };\n};\n\n// Delete item from todo/list.\nexport const deleteFromList = itemToDel => {\n  // Delete req with id (itemToDel) to be deleted from todo list.\n  return dispatch => {\n    fetch(`${serverEndpoint.baseUrl}/deletetodo/${itemToDel._id.toString()}`, {\n      method: 'delete',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ itemToDel }),\n    })\n      .then(res => res.json())\n      .catch(err => console.log(err));\n\n    dispatch({\n      type: actionTypes.DELETE_FROM_LIST,\n      itemToDel: itemToDel,\n    });\n  };\n};\n\n// Delete item from done list.\nexport const deleteFromDone = itemToDel => {\n  // Delete req with id (itemToDel) to be deleted from done list.\n  return dispatch => {\n    fetch(`${serverEndpoint.baseUrl}/deletedone/${itemToDel._id.toString()}`, {\n      method: 'delete',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ itemToDel }),\n    })\n      .then(res => res.json())\n      .catch(err => console.log(err));\n\n    dispatch({\n      type: actionTypes.DELETE_FROM_DONE,\n      itemToDel: itemToDel,\n    });\n  };\n};\n","import React from 'react';\n\nimport './SubmitForm.scss';\n\nfunction SubmitForm(props) {\n  return (\n    <div className='submit-container'>\n      <input\n        className='addItemInput'\n        type='text'\n        autoFocus={true}\n        onChange={props.onInputChange}\n        value={props.inputText}\n        onKeyPress={props.handleInputEnter}\n      />\n      <button\n        className='submitBtn'\n        type='submit'\n        onClick={props.handlerBtnSubmit}>\n        <span className='addBtnText'>Add</span>\n      </button>\n    </div>\n  );\n}\n\nexport default SubmitForm;\n","import React from 'react';\n\nimport '../../scss/listItems/listItem.scss';\n\nfunction List(props) {\n  let listMapped = props.listArr.map(item => {\n    return item.name ? (\n      <li className='listItem' key={Math.random()}>\n        <span className='listItemName'>{item.name}</span>\n        <a\n          onClick={e => e.preventDefault()}\n          className='listDeleteLink listsBtns'\n          href='delete'>\n          <span\n            className='listItemDelete'\n            onClick={() => props.onDeleteFromList(item)}>\n            Delete\n          </span>\n        </a>\n        <a\n          onClick={e => e.preventDefault()}\n          className='listDoneLink listsBtns'\n          href='done'>\n          <span\n            className='listItemDone'\n            onClick={() => props.onAddToDone(item.name)}>\n            Done\n          </span>\n        </a>\n      </li>\n    ) : null;\n  });\n\n  return <ul className=\"todoList-container\">{listMapped}</ul>;\n}\n\nexport default List;\n","import React from 'react';\n\nimport '../../scss/listItems/listItem.scss';\n\nfunction DoneList(props) {\n  let doneListMapped = props.doneArr.map(listItem => {\n    return listItem.name ? (\n      <li className='listItem' key={Math.random()}>\n        <span className='listItemName'>{listItem.name}</span>\n        <a\n          onClick={e => e.preventDefault()}\n          className='listDeleteLink listsBtns'\n          href='delete'>\n          <span\n            className='listItemDelete'\n            onClick={() => props.onDeleteFromDone(listItem)}>\n            Delete\n          </span>\n        </a>\n      </li>\n    ) : null;\n  });\n\n  return <ul>{doneListMapped}</ul>;\n}\n\nexport default DoneList;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './App.scss';\n\nimport * as actions from './store/actions';\n\n// import Navigation from './components/Navigation/Navigation';\nimport SubmitForm from './components/SubmitForm/SubmitForm';\nimport List from './components/List/List';\nimport DoneList from './components/DoneList/DoneList';\n\nclass App extends React.Component {\n  componentDidMount() {\n    // Get state from server\n    this.props.updateInitialState();\n  }\n\n  handlerBtnSubmit = e => {\n    e.preventDefault();\n    // this prevents empty string to go to server, therefore we lose err message, but cut extra complexity on AC and server.\n    if (this.props.text) {\n      this.props.onAddToList(this.props.text);\n      // this.props.updateInitialState();\n    }\n  };\n\n  handleInputEnter = e => {\n    if (e.key === 'Enter') {\n      this.props.onAddToList(this.props.text);\n      // this.props.updateInitialState();\n    }\n  };\n\n  render() {\n    return (\n      <div className='container'>\n        <SubmitForm\n          handlerBtnSubmit={this.handlerBtnSubmit}\n          inputText={this.props.text}\n          onInputChange={this.props.onInputChange}\n          handleInputEnter={this.handleInputEnter}\n        />\n        <div className='todoListContainer listContainer'>\n          <h3 className='ltodoListContainer__header listHeader'>ToDo:</h3>\n          <List\n            updateInitialState={this.props.updateInitialState}\n            onDeleteFromList={this.props.onDeleteFromList}\n            onAddToDone={this.props.onAddToDone}\n            listArr={this.props.list}\n          />\n        </div>\n        <div className='doneListContainer listContainer'>\n          <h3 className='doneListContainer__header listHeader'>Done:</h3>\n          <DoneList\n            doneArr={this.props.done}\n            onDeleteFromDone={this.props.onDeleteFromDone}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    text: state.app.text,\n    list: state.app.list,\n    done: state.app.done,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateInitialState: () => dispatch(actions.updateInitialState()),\n    onInputChange: text => dispatch(actions.inputChange(text)),\n    onAddToList: newItem => dispatch(actions.addToList(newItem)),\n    onDeleteFromList: item => dispatch(actions.deleteFromList(item)),\n    onAddToDone: doneItem => dispatch(actions.addToDone(doneItem)),\n    onDeleteFromDone: item => dispatch(actions.deleteFromDone(item)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport appReducer from './store/reducers/app';\n\nimport App from './App';\nimport './index.css';\n\nconst rootReducer = combineReducers({\n  app: appReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n","const baseUrl = 'https://react-tasker-api.herokuapp.com';\n\n// const baseUrl = 'http://localhost:5000';\n\nmodule.exports = {\n  baseUrl,\n};\n"],"sourceRoot":""}
{"version":3,"sources":["store/actions/actionTypes.js","store/reducers/appReducer.js","store/actions/app.js","store/actions/authActions.js","components/Navigation/NavigationItem/NavigationItem.js","store/actions/errorsAction.js","components/auth/LoginModal/LoginModal.js","components/auth/SignupModal/SignupModal.js","components/Navigation/Navigation.js","components/SubmitForm/SubmitForm.js","store/actions/listActions.js","components/List/List.js","store/actions/doneActions.js","components/DoneList/DoneList.js","App.js","index.js"],"names":["LOGIN_FAILED","initialState","text","list","done","isAuthenticated","user","token","localStorage","getItem","isLogged","msg","errData","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","loadUser","setItem","id","signupUser","removeItem","logoutUser","actionTypes","loginFailed","clearErrors","todoList","doneList","concat","toConsumableArray","updateInitialState","inputChange","newItem","addToList","newList","filter","item","_id","itemToDel","deleteFromList","name","doneItem","newDoneList","addtoDone","deleteFromDone","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","getState","resData","wrap","_context","prev","next","axios","get","sent","data","stop","_x","_x2","apply","this","tokenConfig","app","config","headers","Content-Type","withRouter","connect","onLogoutUser","props","react_default","createElement","react_router_dom","onClick","openModal","openingModal","loggingOut","history","push","className","activeClassName","to","linkTo","children","onLoginUser","_ref2","email","password","_ref3","_callee2","bodyData","_context2","post","t0","response","_x3","loginUser","onClearErrors","_useState","useState","_useState2","slicedToArray","setEmail","_useState3","_useState4","setPassword","useEffect","closeSignupModal","displayError","field","errField","eachErr","param","htmlFor","onChange","e","target","value","placeholder","required","preventDefault","onSignupUser","_ref4","_ref5","_callee3","_context3","_x4","setName","_useState5","_useState6","closeLoginModal","errMessage","inputField","isLoginModalOpen","setIsLoginModalOpen","isSignupModalOpen","setIsSignupModalOpen","userName","CSSTransition","in","timeout","unmountOnExit","classNames","auth_LoginModal_LoginModal","auth_SignupModal_SignupModal","react","Navigation_NavigationItem_NavigationItem","onInputChange","onAddToList","newTodo","reqBody","JSON","stringify","console","log","autoFocus","onKeyPress","key","listArr","onDeleteFromList","delete","toString","onAddToDone","newDone","message","addToDone","listMapped","map","Math","random","href","doneArr","onDeleteFromDone","doneListMapped","listItem","App","basename","process","components_Navigation_Navigation","components_SubmitForm_SubmitForm","List_List","DoneList_DoneList","React","Component","currentToken","currentTokenId","stateToken","middleware","thunk","rootReducer","combineReducers","appReducer","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","querySelector"],"mappings":"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","file":"static/js/main.96ac5e82.chunk.js","sourcesContent":["export const LOAD_USER = 'LOAD_USER';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const SIGNUP_USER = 'SIGNUP_USER';\nexport const LOGOUT_USER = 'LOGOUT_USER';\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\n\nexport const INPUT_CHANGE = 'INPUT_CHANGE';\nexport const ADD_TO_LIST = 'ADD_TO_LIST';\nexport const DELETE_FROM_LIST = 'DELETE_FROM_LIST';\nexport const ADD_TO_DONE = 'ADD_TO_DONE';\nexport const DELETE_FROM_DONE = 'DELETE_FROM_DONE';\n\nexport const UPDATE_INITIAL_STATE = 'UPDATE_INITIAL_STATE';\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  text: '',\n  list: [],\n  done: [],\n  isAuthenticated: false,\n  user: null,\n  token: localStorage.getItem('token'),\n  isLogged: false,\n  msg: '',\n  errData: null,\n};\n\nconst updateInitialState = (state, action) => {\n  const { todoList, doneList } = action;\n\n  return {\n    ...state,\n    list: [...state.list, ...todoList],\n    done: [...state.done, ...doneList],\n  };\n};\n\nconst loadUser = (state, action) => {\n  return {\n    ...state,\n    isAuthenticated: true,\n    user: action.user,\n    token: localStorage.getItem('token'),\n  };\n};\n\nconst loginUser = (state, action) => {\n  localStorage.setItem('token', action.token);\n  // set id to LS for loading user on refresh(need it to get data from server in order to know which user is logged)\n  localStorage.setItem('id', action.user.id);\n\n  return {\n    ...state,\n    isAuthenticated: true,\n    user: action.user,\n    isLogged: true,\n    token: action.token,\n    errData: null,\n  };\n};\n\nconst signupUser = (state, action) => {\n  localStorage.setItem('token', action.token);\n  // set id to LS for loading user on refresh(need it to get data from server in order to know which user is logged)\n  localStorage.setItem('id', action.user.id);\n\n  return {\n    ...state,\n    isAuthenticated: true,\n    user: action.user,\n    isLogged: true,\n    token: action.token,\n    errData: null,\n  };\n};\n\nconst logoutUser = (state, action) => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('id');\n  return {\n    ...state,\n    isAuthenticated: false,\n    user: null,\n    token: null,\n    isLogged: false,\n  };\n};\n\nconst loginFailed = (state, action) => {\n  return {\n    ...state,\n    isAuthenticated: false,\n    token: null,\n    user: null,\n    isLogged: false,\n    errData: action.errData,\n  };\n};\n\nconst clearErrors = (state, action) => {\n  return {\n    ...state,\n    errData: null,\n  };\n};\n\nconst inputChange = (state, action) => {\n  return {\n    ...state,\n    text: action.text,\n  };\n};\n\nconst addToList = (state, action) => {\n  return {\n    ...state,\n    list: [...state.list, action.newItem],\n  };\n};\n\nconst deleteFromList = (state, action) => {\n  const newList = state.list.filter(item => item._id !== action.itemToDel._id);\n  return {\n    ...state,\n    list: newList,\n  };\n};\n\nconst addtoDone = (state, action) => {\n  // Check items that are not null and that does not exist on list yet.\n  const newList = state.list.filter(item => {\n    return item.name !== action.doneItem.item.name;\n    // && action.doneItem.name !== null;\n  });\n  const newDoneList = [...state.done, action.doneItem.item];\n\n  return {\n    ...state,\n    list: newList,\n    done: newDoneList,\n  };\n};\n\nconst deleteFromDone = (state, action) => {\n  const newDoneList = state.done.filter(\n    item => item._id !== action.itemToDel._id,\n  );\n  return {\n    ...state,\n    done: newDoneList,\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.LOAD_USER:\n      return loadUser(state, action);\n\n    case actionTypes.LOGIN_USER:\n      return loginUser(state, action);\n\n    case actionTypes.SIGNUP_USER:\n      return signupUser(state, action);\n\n    case actionTypes.LOGOUT_USER:\n      return logoutUser(state, action);\n\n    case actionTypes.LOGIN_FAILED:\n      return loginFailed(state, action);\n\n    case actionTypes.CLEAR_ERRORS:\n      return clearErrors(state, action);\n\n    case actionTypes.UPDATE_INITIAL_STATE:\n      return updateInitialState(state, action);\n\n    case actionTypes.INPUT_CHANGE:\n      return inputChange(state, action);\n\n    case actionTypes.ADD_TO_LIST:\n      return addToList(state, action);\n\n    case actionTypes.DELETE_FROM_LIST:\n      return deleteFromList(state, action);\n\n    case actionTypes.ADD_TO_DONE:\n      return addtoDone(state, action);\n\n    case actionTypes.DELETE_FROM_DONE:\n      return deleteFromDone(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import axios from 'axios';\n\nimport * as actionTypes from './actionTypes';\n\n\n// Setting initial state with data from server.\n// Called when app mounts.\nexport const updateInitialState = () => async (dispatch, getState) => {\n  const resData = await axios.get('https://react-tasker-api.herokuapp.com');\n\n  dispatch({\n    type: actionTypes.UPDATE_INITIAL_STATE,\n    todoList: resData.data.list,\n    doneList: resData.data.done,\n  });\n};\n\n// Text for new todo.\nexport const inputChange = text => {\n  return {\n    type: actionTypes.INPUT_CHANGE,\n    text: text.target.value,\n  };\n};\n","import axios from 'axios';\n\nimport * as actionTypes from './actionTypes';\n\n// import serverEndpoint from '../../assets/utils/serverEndpoint';\n// import { updateInitialState } from '../actions/app';\n\n// LOAD USER\nexport const loadUser = () => async (dispatch, getState) => {\n  const currentToken = localStorage.getItem('token');\n  const currentTokenId = localStorage.getItem('id');\n  const stateToken = getState().app.token;\n\n  try {\n    // if have all proceed to make req for user with id param\n    if (currentToken && currentTokenId && stateToken) {\n      const user = await axios.get(\n        `/auth/loaduser/${currentTokenId}`,\n        tokenConfig(getState),\n      );\n\n      if (user) {\n        dispatch({\n          type: actionTypes.LOAD_USER,\n          user: user.data,\n        });\n      }\n    }\n  } catch (err) {\n    // TODO# Deal with initial load user(when there is no user) but there is old id/token in localStorage\n    console.log(err);\n  }\n};\n\n// LOGIN USER\nexport const loginUser = ({ email, password }) => async dispatch => {\n  if (!email || !password) {\n    // TODO - add error case = please provide input..\n    // dispatch();\n  }\n  // Config request.\n  const bodyData = {\n    email,\n    password,\n  };\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    // Send data to server\n    const resData = await axios.post('/auth/login', bodyData, config);\n    if (resData.data.token) {\n      dispatch({\n        type: actionTypes.LOGIN_USER,\n        user: resData.data.user,\n        token: resData.data.token,\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: actionTypes.LOGIN_FAILED,\n      errData: err.response.data,\n    });\n  }\n};\n\n// SIGNUP USER\nexport const signupUser = ({ name, email, password }) => async dispatch => {\n  if (!name || !email || !password) {\n    // TODO - add error case = please provide input..\n    // dispatch(error);\n  }\n  // Config request.\n  const bodyData = {\n    name,\n    email,\n    password,\n  };\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    // Send data to server\n    const resData = await axios.post('/auth/signup', bodyData, config);\n    if (resData.data.token) {\n      dispatch({\n        type: actionTypes.SIGNUP_USER,\n        user: resData.data.user,\n        token: resData.data.token,\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: actionTypes.LOGIN_FAILED,\n      errData: err.response.data,\n    });\n  }\n};\n\n// LOGOUT USER\nexport const logoutUser = () => {\n  return {\n    type: actionTypes.LOGOUT_USER,\n  };\n};\n\n// TOKEN CONFIG\nexport const tokenConfig = getState => {\n  // get token from local storage\n  const token = getState().app.token;\n  // const token = localStorage.getItem('token');\n\n  // headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  // if token exists, add it to headers\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { logoutUser } from '../../../store/actions/authActions';\n\nimport './NavigationItem.scss';\n\nfunction NavigationItem(props) {\n  const openingModal = () => {\n    // if has modal(login/singup) open it, otherwise(logout) null\n    if (props.openModal) {\n      props.openModal(true);\n    } else {\n      return null;\n    }\n  };\n\n  const loggingOut = () => {\n    if (props.loggingOut) {\n      props.onLogoutUser();\n      props.history.push('/');\n    }\n  };\n\n  return (\n    <NavLink\n      onClick={() => {\n        openingModal();\n        loggingOut();\n      }}\n      className='nav-item'\n      activeClassName='active-nav-item'\n      to={props.linkTo}>\n      <span className='nav-text-span'>{props.children}</span>\n    </NavLink>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLogged: state.app.isLogged,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLogoutUser: () => dispatch(logoutUser()),\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(NavigationItem),\n);\n","import * as actionTypes from './actionTypes';\n\nexport function loginFailed(errors) {\n  return dispatch => {\n    return dispatch({\n      type: actionTypes.LOGIN_FAILED,\n      errData: errors,\n    });\n  };\n}\n\nexport const clearErrors = () => {\n  return {\n    type: actionTypes.CLEAR_ERRORS,\n  };\n};\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { loginUser } from '../../../store/actions/authActions';\nimport { clearErrors } from '../../../store/actions/errorsAction';\n\nimport '../../../scss/modals/modals.scss';\nimport './LoginModal.scss';\n\nconst LoginModal = props => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  // Close signup modal when login modal is open\n  useEffect(() => {\n    props.closeSignupModal(false);\n  });\n\n  // Send data to server\n  const onSubmit = e => {\n    e.preventDefault();\n    const user = {\n      email,\n      password,\n    };\n    props.onLoginUser(user);\n  };\n\n  // Listen for async changes in props(on is logged in)\n  // Close modal when isLogged is set to true(when user is logged in)\n  useEffect(() => {\n    if (props.isLogged) {\n      props.openModal(false);\n      // update url on login to index page\n      props.history.push('/');\n      props.onClearErrors();\n    }\n  }, [props]);\n\n  const closeModal = () => {\n    props.openModal(false);\n    // update url on closing(X) to index page\n    props.history.push('/');\n    props.onClearErrors();\n  };\n\n  const displayError = (field, errData = props.errData) => {\n    if (errData) {\n      // errData may exist with just msg, so we need to check if errData has errData obj with data.\n      if (errData.errData) {\n        const errField = errData.errData.filter(eachErr => {\n          return eachErr.param === field;\n        });\n        return errField[0] ? errField[0].msg : null;\n      }\n\n      // when password is wrong there is errData, just field and msg\n      // need this in order to display wrong password only above password field\n      if (field === 'password') {\n        return errData ? errData.msg : null;\n      }\n    }\n  };\n\n  return (\n    <div className='modals-wrapper'>\n      <div className='modal-container'>\n        <div onClick={closeModal} className='modal-container__close' />\n        <form className='modal-container__form'>\n          <div className='modal-container__form__email-container'>\n            <label\n              className='modal-container__form__email-container--email-label'\n              htmlFor='email'>\n              Email\n            </label>\n            {props.errData ? (\n              <p className='error-msg-field'>{displayError('email')}</p>\n            ) : null}\n            <input\n              onChange={e => setEmail(e.target.value)}\n              value={email}\n              id='email'\n              className={`modal-container__form__email-container--email-input`}\n              type='email'\n              placeholder='Email'\n              required={true}\n            />\n          </div>\n\n          <div className='modal-container__form__password-container'>\n            <label\n              className='modal-container__form__password-container--password-label'\n              htmlFor='password'>\n              Password\n            </label>\n            {props.errData ? (\n              <p className='error-msg-field'>{displayError('password')}</p>\n            ) : null}\n            <input\n              onChange={e => setPassword(e.target.value)}\n              value={password}\n              id='password'\n              className='modal-container__form__password-container--password-input'\n              type='password'\n              placeholder='Password'\n              required={true}\n            />\n          </div>\n          <button\n            type='submit'\n            onClick={onSubmit}\n            className='modal-container__form__login-button'>\n            Login\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    isLogged: state.app.isLogged,\n    errData: state.app.errData,\n    // msg: state.auth.msg,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLoginUser: user => dispatch(loginUser(user)),\n    onClearErrors: () => dispatch(clearErrors()),\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(LoginModal),\n);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { signupUser } from '../../../store/actions/authActions';\nimport { clearErrors } from '../../../store/actions/errorsAction';\n\nimport './SignupModal.scss';\n\nconst SignupModal = props => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  // Close login modal when signup modal is open\n  useEffect(() => {\n    props.closeLoginModal(false);\n  });\n\n  // Send data to server\n  const onSubmit = e => {\n    e.preventDefault();\n    const user = {\n      name,\n      email,\n      password,\n    };\n    props.onSignupUser(user);\n  };\n\n  // Listen for async changes in props(on isLogged)\n  // Close modal when isLogged is set to true(when user is logged/signed in)\n  useEffect(() => {\n    if (props.isLogged) {\n      props.openModal(false);\n      // update url on login to index page\n      props.history.push('/');\n      props.onClearErrors();\n    }\n  }, [props]);\n\n  const closeModal = () => {\n    props.openModal(false);\n    // update url on closing(X) to index page\n    props.history.push('/');\n    props.onClearErrors();\n  };\n\n  const displayError = (field, errData = props.errData) => {\n    if (errData) {\n      // errData may exist with just msg, so we need to check if errData has errData obj with data.\n      if (errData.errData) {\n        const errField = errData.errData.filter(eachErr => {\n          return eachErr.param === field;\n        });\n        return errField[0] ? errField[0].msg : null;\n      }\n\n      // when password is wrong there is errData, just field and msg\n      // need this in order to display wrong password only above password field\n      if (field === 'password') {\n        return errData ? errData.msg : null;\n      }\n    }\n  };\n\n  const errMessage = inputField => {\n    return props.errData ? (\n      <p className='error-msg-field'>{displayError(inputField)}</p>\n    ) : null;\n  };\n\n  return (\n    <div className='modals-wrapper'>\n      <div className='modal-container'>\n        <div className='modal-container__close' onClick={closeModal} />\n        <form className='modal-container__form'>\n          <div className='modal-container__form__name-container'>\n            <label\n              className='modal-container__form__name-container--name-label'\n              htmlFor='name'>\n              {/* {errMessage('name') || 'Name'} */}\n              Name\n            </label>\n            {errMessage('name')}\n            <input\n              onChange={e => setName(e.target.value)}\n              value={name}\n              id='name'\n              className='modal-container__form__name-container--name-input'\n              type='text'\n              placeholder='Name'\n              required={true}\n            />\n          </div>\n\n          <div className='modal-container__form__email-container'>\n            <label\n              className='modal-container__form__email-container--email-label'\n              htmlFor='email'>\n              {/* {errMessage('email') || 'Email'} */}\n              Email\n            </label>\n            {errMessage('email')}\n\n            <input\n              onChange={e => setEmail(e.target.value)}\n              value={email}\n              id='email'\n              className='modal-container__form__email-container--email-input'\n              type='email'\n              placeholder='Email'\n              required={true}\n            />\n          </div>\n\n          <div className='modal-container__form__password-container'>\n            <label\n              className='modal-container__form__password-container--password-label'\n              htmlFor='password'>\n              {/* {errMessage('password') || 'Password'} */}\n              Password\n            </label>\n            {errMessage('password')}\n\n            <input\n              onChange={e => setPassword(e.target.value)}\n              value={password}\n              id='password'\n              className='modal-container__form__password-container--password-input'\n              type='password'\n              placeholder='Password'\n              required={true}\n            />\n          </div>\n          <button\n            type='submit'\n            onClick={onSubmit}\n            className='modal-container__form__login-button'>\n            Signup\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    isLogged: state.app.isLogged,\n    errData: state.app.errData,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSignupUser: user => dispatch(signupUser(user)),\n    onClearErrors: () => dispatch(clearErrors()),\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(SignupModal),\n);\n","import React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { withRouter } from 'react-router-dom';\n\nimport NavigationItem from './NavigationItem/NavigationItem';\nimport LoginModal from '../auth/LoginModal/LoginModal';\nimport SignupModal from '../auth/SignupModal/SignupModal';\n\nimport './Navigation.scss';\n\nfunction Navigation(props) {\n  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);\n  const [isSignupModalOpen, setIsSignupModalOpen] = useState(false);\n\n  const userName = props.user ? props.user.name : '';\n\n  return (\n    <div className='navigation-container'>\n      <CSSTransition\n        in={isLoginModalOpen}\n        timeout={100}\n        unmountOnExit\n        classNames='modal'>\n        <div>\n          <LoginModal\n            closeSignupModal={setIsSignupModalOpen}\n            openModal={setIsLoginModalOpen}\n          />\n        </div>\n      </CSSTransition>\n\n      <CSSTransition\n        in={isSignupModalOpen}\n        timeout={100}\n        unmountOnExit\n        classNames='modal'>\n        <div>\n          <SignupModal\n            closeLoginModal={setIsLoginModalOpen}\n            openModal={setIsSignupModalOpen}\n          />\n        </div>\n      </CSSTransition>\n\n      <h5 className='navigation-container__welcome'>{`Welcome ${userName}`}</h5>\n      <div className='navigation-container__nav-items-container'>\n        {props.isAuthenticated ? (\n          <Fragment>\n            <NavigationItem loggingOut={true} linkTo='/'>\n              Logout\n            </NavigationItem>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <NavigationItem openModal={setIsLoginModalOpen} linkTo='/login'>\n              Login\n            </NavigationItem>\n            <NavigationItem openModal={setIsSignupModalOpen} linkTo='/register'>\n              Signup\n            </NavigationItem>\n          </Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.app.isAuthenticated,\n    user: state.app.user,\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    null,\n  )(Navigation),\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { inputChange, updateInitialState } from '../../store/actions/app';\nimport { addToList } from '../../store/actions/listActions';\n\nimport './SubmitForm.scss';\n\nfunction SubmitForm(props) {\n  const handleInputEnter = e => {\n    if (e.key === 'Enter') {\n      props.onAddToList(props.text);\n    }\n  };\n\n  const handlerBtnSubmit = e => {\n    e.preventDefault();\n    // this prevents empty string to go to server, therefore we lose err message, but cut extra complexity on AC and server.\n    if (props.text) {\n      props.onAddToList(props.text);\n    }\n  };\n\n  return (\n    <div className='submit-container'>\n      <input\n        className='addItemInput'\n        type='text'\n        autoFocus={true}\n        onChange={props.onInputChange}\n        value={props.text}\n        onKeyPress={handleInputEnter}\n        placeholder='Add task'\n      />\n      <button className='submitBtn' type='submit' onClick={handlerBtnSubmit}>\n        <span className='addBtnText'>Add</span>\n      </button>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    text: state.app.text,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateInitialState: () => dispatch(updateInitialState()),\n    onInputChange: text => dispatch(inputChange(text)),\n    onAddToList: newItem => dispatch(addToList(newItem)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SubmitForm);\n","import axios from 'axios';\n\nimport * as actionTypes from './actionTypes';\nimport { tokenConfig } from '../actions/authActions';\n\n// import serverEndpoint from '../../assets/utils/serverEndpoint';\n// import { updateInitialState } from '../actions/app';\n\n// Add new item to todo/list array.\nexport const addToList = newItem => async (dispatch, getState) => {\n  // Gets item name, makes obj with received item name.\n  const newTodo = { name: newItem };\n  const reqBody = JSON.stringify({ newTodo });\n\n  // Send POST req to server with new new item obj.\n  try {\n    const resData = await axios.post(\n      '/list/addtodo',\n      reqBody,\n      tokenConfig(getState),\n    );\n\n    if (resData.data.name) {\n      await dispatch({\n        type: actionTypes.ADD_TO_LIST,\n        newItem: resData.data,\n      });\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// Delete item from todo/list.\nexport const deleteFromList = itemToDel => async (dispatch, getState) => {\n  // Delete req with id (itemToDel) to be deleted from todo list.\n  const reqBody = JSON.stringify({ itemToDel });\n\n  try {\n    await axios.delete(\n      `/list/deletetodo/${itemToDel._id.toString()}`,\n      tokenConfig(getState),\n      reqBody,\n    );\n\n    dispatch({\n      type: actionTypes.DELETE_FROM_LIST,\n      itemToDel: itemToDel,\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { deleteFromList } from '../../store/actions/listActions';\nimport { addToDone } from '../../store/actions/doneActions';\n\nimport '../../scss/listItems/listItem.scss';\n\nfunction List(props) {\n  let listMapped = props.listArr.map(item => {\n    return item.name ? (\n      <li className='listItem' key={item.id || Math.random()}>\n        <span className='listItemName'>{item.name}</span>\n        <a\n          onClick={e => e.preventDefault()}\n          className='listDeleteLink listsBtns'\n          href='delete'>\n          <span\n            className='listItemDelete'\n            onClick={() => props.onDeleteFromList(item)}>\n            Delete\n          </span>\n        </a>\n        <a\n          onClick={e => e.preventDefault()}\n          className='listDoneLink listsBtns'\n          href='done'>\n          <span\n            className='listItemDone'\n            onClick={() => props.onAddToDone(item.name)}>\n            Done\n          </span>\n        </a>\n      </li>\n    ) : null;\n  });\n\n  return <ul className='todoList-container'>{listMapped}</ul>;\n}\n\nconst mapStateToProps = state => {\n  return {\n    listArr: state.app.list,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDeleteFromList: item => dispatch(deleteFromList(item)),\n    onAddToDone: doneItem => dispatch(addToDone(doneItem)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(List);\n","import axios from 'axios';\n\nimport * as actionTypes from './actionTypes';\nimport { tokenConfig } from './authActions';\n\n// import serverEndpoint from '../../assets/utils/serverEndpoint';\nimport { updateInitialState } from '../actions/app';\n\n// ADD ITEM FROM TODO LIST TO DONE LIST\nexport const addToDone = doneItem => async (dispatch, getState) => {\n  //  Gets new(clicked todo item) name and creates obj with its name as name property.\n  const newDone = { name: doneItem };\n  const reqBody = JSON.stringify({ newDone });\n\n  try {\n    // Send POST req to server with new done item obj.\n    const resData = await axios.post(\n      '/done/adddone',\n      reqBody,\n      tokenConfig(getState),\n    );\n\n    // if there is name that comes from server dispatches it to reducer to add it to done list and remove from list.(todo)\n    if (resData.data.item.name) {\n      await dispatch({\n        type: actionTypes.ADD_TO_DONE,\n        doneItem: resData.data,\n        message: resData.data.message,\n      });\n    }\n    // otherwise sends null to reducer so it can remove it from list(todo) and just not add anything to done.\n    else {\n      await dispatch({\n        type: actionTypes.ADD_TO_DONE,\n        doneItem: resData.data,\n        message: resData.data.message,\n      });\n    }\n    updateInitialState();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// Delete item from done list.\nexport const deleteFromDone = itemToDel => async (dispatch, getState) => {\n  // Delete req with id (itemToDel._id) param to be deleted from done list.\n  await axios.delete(\n    `/done/deletedone/${itemToDel._id.toString()}`,\n    tokenConfig(getState),\n  );\n  dispatch({\n    type: actionTypes.DELETE_FROM_DONE,\n    itemToDel: itemToDel,\n  });\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { deleteFromDone } from '../../store/actions/doneActions';\n\nimport '../../scss/listItems/listItem.scss';\n\nfunction DoneList(props) {\n  let doneListMapped = props.doneArr.map(listItem => {\n    return listItem.name ? (\n      <li className='listItem' key={listItem.id || Math.random()}>\n        <span className='listItemName'>{listItem.name}</span>\n        <a\n          onClick={e => e.preventDefault()}\n          className='listDeleteLink listsBtns'\n          href='delete'>\n          <span\n            className='listItemDelete'\n            onClick={() => props.onDeleteFromDone(listItem)}>\n            Delete\n          </span>\n        </a>\n      </li>\n    ) : null;\n  });\n\n  return <ul>{doneListMapped}</ul>;\n}\n\nconst mapStateToProps = state => {\n  return {\n    doneArr: state.app.done,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onDeleteFromDone: item => dispatch(deleteFromDone(item)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(DoneList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport './App.scss';\n\nimport { updateInitialState } from './store/actions/app';\nimport { loadUser } from './store/actions/authActions';\n\nimport Navigation from './components/Navigation/Navigation';\nimport SubmitForm from './components/SubmitForm/SubmitForm';\nimport List from './components/List/List';\nimport DoneList from './components/DoneList/DoneList';\n\nclass App extends React.Component {\n  componentDidMount() {\n    // Get state from server\n    this.props.updateInitialState();\n    // Load user initially(on refresh) if there is ID and TOKEN in localStorage\n    this.props.loadUser();\n  }\n\n  render() {\n    return (\n      <div className='app-container'>\n        <div className='navigation'>\n          <Router basename={process.env.PUBLIC_URL}>\n            <Navigation />\n          </Router>\n        </div>\n        <div className='todo-box-container'>\n          <SubmitForm />\n          <div className='todoListContainer listContainer'>\n            <h3 className='ltodoListContainer__header listHeader'>ToDo:</h3>\n            <List updateInitialState={this.props.updateInitialState} />\n          </div>\n          <div className='doneListContainer listContainer'>\n            <h3 className='doneListContainer__header listHeader'>Done:</h3>\n            <DoneList />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateInitialState: () => dispatch(updateInitialState()),\n    loadUser: () => dispatch(loadUser()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport appReducer from './store/reducers/appReducer';\n\nimport App from './App';\nimport './index.css';\n\nconst initalState = {};\n\nconst middleware = [thunk];\n\nconst rootReducer = combineReducers({\n  app: appReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  initalState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}